#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2023/03/06 14:14:46
# Search URL: https://esgf-node.llnl.gov/esg-search/wget/?distrib=false&dataset_id=CMIP6.ScenarioMIP.MRI.MRI-ESM2-0.ssp126.r1i1p1f1.Oday.tos.gn.v20210329|esgf-data03.diasjp.net&dataset_id=CMIP6.ScenarioMIP.MRI.MRI-ESM2-0.ssp245.r1i1p1f1.Oday.tos.gn.v20210329|esgf-data03.diasjp.net&dataset_id=CMIP6.ScenarioMIP.MRI.MRI-ESM2-0.ssp585.r1i1p1f1.Oday.tos.gn.v20210329|esgf-data03.diasjp.net&dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp585.r1i1p1f1.Oday.tos.gn.v20191114|esgf-data02.diasjp.net&dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r1i1p1f1.Oday.tos.gn.v20191114|esgf-data02.diasjp.net&dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp126.r1i1p1f1.Oday.tos.gn.v20191114|esgf-data02.diasjp.net&dataset_id=CMIP6.ScenarioMIP.CCCma.CanESM5.ssp245.r1i1p1f1.Oday.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.ScenarioMIP.CCCma.CanESM5.ssp585.r1i1p1f1.Oday.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.ScenarioMIP.CCCma.CanESM5.ssp126.r1i1p1f1.Oday.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.ScenarioMIP.BCC.BCC-CSM2-MR.ssp585.r1i1p1f1.Oday.tos.gn.v20190325|cmip.bcc.cma.cn&dataset_id=CMIP6.ScenarioMIP.BCC.BCC-CSM2-MR.ssp126.r1i1p1f1.Oday.tos.gn.v20190321|cmip.bcc.cma.cn&dataset_id=CMIP6.ScenarioMIP.BCC.BCC-CSM2-MR.ssp245.r1i1p1f1.Oday.tos.gn.v20190321|cmip.bcc.cma.cn&dataset_id=CMIP6.ScenarioMIP.NOAA-GFDL.GFDL-ESM4.ssp585.r1i1p1f1.Oday.tos.gn.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.ScenarioMIP.NOAA-GFDL.GFDL-ESM4.ssp126.r1i1p1f1.Oday.tos.gr.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.ScenarioMIP.NOAA-GFDL.GFDL-ESM4.ssp245.r1i1p1f1.Oday.tos.gr.v20180701|esgdata.gfdl.noaa.gov
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget/?distrib=false&dataset_id=CMIP6.ScenarioMIP.MRI.MRI-ESM2-0.ssp126.r1i1p1f1.Oday.tos.gn.v20210329|esgf-data03.diasjp.net&dataset_id=CMIP6.ScenarioMIP.MRI.MRI-ESM2-0.ssp245.r1i1p1f1.Oday.tos.gn.v20210329|esgf-data03.diasjp.net&dataset_id=CMIP6.ScenarioMIP.MRI.MRI-ESM2-0.ssp585.r1i1p1f1.Oday.tos.gn.v20210329|esgf-data03.diasjp.net&dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp585.r1i1p1f1.Oday.tos.gn.v20191114|esgf-data02.diasjp.net&dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp245.r1i1p1f1.Oday.tos.gn.v20191114|esgf-data02.diasjp.net&dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp126.r1i1p1f1.Oday.tos.gn.v20191114|esgf-data02.diasjp.net&dataset_id=CMIP6.ScenarioMIP.CCCma.CanESM5.ssp245.r1i1p1f1.Oday.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.ScenarioMIP.CCCma.CanESM5.ssp585.r1i1p1f1.Oday.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.ScenarioMIP.CCCma.CanESM5.ssp126.r1i1p1f1.Oday.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.ScenarioMIP.BCC.BCC-CSM2-MR.ssp585.r1i1p1f1.Oday.tos.gn.v20190325|cmip.bcc.cma.cn&dataset_id=CMIP6.ScenarioMIP.BCC.BCC-CSM2-MR.ssp126.r1i1p1f1.Oday.tos.gn.v20190321|cmip.bcc.cma.cn&dataset_id=CMIP6.ScenarioMIP.BCC.BCC-CSM2-MR.ssp245.r1i1p1f1.Oday.tos.gn.v20190321|cmip.bcc.cma.cn&dataset_id=CMIP6.ScenarioMIP.NOAA-GFDL.GFDL-ESM4.ssp585.r1i1p1f1.Oday.tos.gn.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.ScenarioMIP.NOAA-GFDL.GFDL-ESM4.ssp126.r1i1p1f1.Oday.tos.gr.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.ScenarioMIP.NOAA-GFDL.GFDL-ESM4.ssp245.r1i1p1f1.Oday.tos.gr.v20180701|esgdata.gfdl.noaa.gov'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20150101-20241231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp126/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20150101-20241231.nc' 'SHA256' '10a0fda5a9c991e33c79ad6651d27d7f39164ac356dc2d20a395b81acb4bcb18'
'tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20250101-20341231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp126/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20250101-20341231.nc' 'SHA256' '468a9fc83b382d03f677488eb077e9f7ecfabc765fa385b1feafbea9c40e5460'
'tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20350101-20441231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp126/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20350101-20441231.nc' 'SHA256' 'a96a0a3be8d0db0e7685477c6adf7bd77cbfb36a6350030eb6df40c0b88e012e'
'tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20450101-20541231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp126/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20450101-20541231.nc' 'SHA256' '7a04f09d7e04536a0b64906f767dc0a3245aaf43f17efb5fce34dd7b692d3c93'
'tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20550101-20641231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp126/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20550101-20641231.nc' 'SHA256' '0983dd395d81c32e9ac9598397d58294441500c545334593b3bc1971e737ef8d'
'tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20650101-20741231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp126/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20650101-20741231.nc' 'SHA256' 'a86c659394d964e961b92a59f74a89ee47a5b589de14b0ec5a7519e30503470d'
'tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20750101-20841231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp126/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20750101-20841231.nc' 'SHA256' '41834ba02c6e03d5b0c513f6cd05a208e313b07dc8a03a65a924f5acf068ae31'
'tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20850101-20941231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp126/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20850101-20941231.nc' 'SHA256' '8d9e78bd125494ee4a367b71291a9ffef365f2e5c2639c1fa6f4958dd1a4acb1'
'tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20950101-21001231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp126/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp126_r1i1p1f1_gn_20950101-21001231.nc' 'SHA256' '2cc33d308a43671551704f26f4c86c58f9f4012cf953e5acf429b2a9d1ddf05c'
'tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20150101-20241231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp245/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20150101-20241231.nc' 'SHA256' '059db834fe9ba0cdd923c2c401bc69a5bad812517ac0b1510a5eecde739b921d'
'tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20250101-20341231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp245/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20250101-20341231.nc' 'SHA256' '880ff31460385ab97f62c2cfb16df56fe531c2a8fcb5e9f24a1b0edb5d120bac'
'tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20350101-20441231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp245/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20350101-20441231.nc' 'SHA256' '788671b201798e4ba17565d1e294614f042c29387b1c5bd7859bfe36b2c25ff8'
'tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20450101-20541231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp245/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20450101-20541231.nc' 'SHA256' '4e823107c7f0af64a712c038f022400c8d66de8f9676d36502f4805460acec47'
'tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20550101-20641231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp245/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'b4bb8a4b141c354a9b1f47551620b0ba62f20e685e8a48b57c4e3be392841444'
'tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20650101-20741231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp245/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20650101-20741231.nc' 'SHA256' 'cdf8f8dc420df8971f781f6304e44af438b2971f7611010bf75f2a52d446aec4'
'tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20750101-20841231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp245/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20750101-20841231.nc' 'SHA256' '52489a67841f7b557b8c242ff3a63dc76aa0391cf2f8b2f527d48608f1fbdea1'
'tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20850101-20941231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp245/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20850101-20941231.nc' 'SHA256' '26c98ce9cc6f391791960ca9ddcceb2036fe3e4db6813bd0561dd140c6cbac1b'
'tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20950101-21001231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp245/r1i1p1f1/Oday/tos/gn/v20190321/tos_Oday_BCC-CSM2-MR_ssp245_r1i1p1f1_gn_20950101-21001231.nc' 'SHA256' '4ca20231641433247005881658097107a2435eee8a61d9e4d9d4b39b0c52f868'
'tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20150101-20241231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp585/r1i1p1f1/Oday/tos/gn/v20190325/tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20150101-20241231.nc' 'SHA256' 'f50da4e16f0aaef06ea04bdac9f94c3015748f3f727e1627fbd658a82ff39d90'
'tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20250101-20341231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp585/r1i1p1f1/Oday/tos/gn/v20190325/tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20250101-20341231.nc' 'SHA256' '5a05ece0405614e18f2605dfcf957a322a21b77ad4bf8edf03797688c520d83c'
'tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20350101-20441231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp585/r1i1p1f1/Oday/tos/gn/v20190325/tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20350101-20441231.nc' 'SHA256' '0b8ead60b5dd5fc9ccc726875d2e8b1a10ce53fa6f5d4f498cd27cb8d4a185ec'
'tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20450101-20541231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp585/r1i1p1f1/Oday/tos/gn/v20190325/tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20450101-20541231.nc' 'SHA256' 'cf29a455da30723927439f0725d6c7e06cfa7e986c6228395fbc6cede698676a'
'tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20550101-20641231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp585/r1i1p1f1/Oday/tos/gn/v20190325/tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'bec82f6c13989f88b4108e5d9764b42ef9b58d9d4255aeda1a18cf4e5dfc22b5'
'tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20650101-20741231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp585/r1i1p1f1/Oday/tos/gn/v20190325/tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20650101-20741231.nc' 'SHA256' '00f1132d7356a5d3f9fe7c9b9301ec42d9654934121c75281758751a32b9f28c'
'tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20750101-20841231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp585/r1i1p1f1/Oday/tos/gn/v20190325/tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20750101-20841231.nc' 'SHA256' 'a62a78c2a7c852c071856408a4ac03ce72f56b5c8e9bd022e039f53af89fef24'
'tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20850101-20941231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp585/r1i1p1f1/Oday/tos/gn/v20190325/tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20850101-20941231.nc' 'SHA256' '9f303b4db8221a8e8955cb4b311aed9234282704c118349357cec40a2ef0b5f0'
'tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20950101-21001231.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp585/r1i1p1f1/Oday/tos/gn/v20190325/tos_Oday_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_20950101-21001231.nc' 'SHA256' '364a9c6feb35a8587884cd30b691755013040403867971d8cd69ea93ebcfbb70'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20150101-20201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20150101-20201231.nc' 'SHA256' '34658e2d65c1c4c2eb9965c8634fcf25ae25a0d323be887b6bd743ebe49b514d'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20210101-20301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20210101-20301231.nc' 'SHA256' '87ce1aaa63f5c16f627407f1015a3fdb667e966abd3a6a9e9f6bcd5a955f9c74'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20310101-20401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20310101-20401231.nc' 'SHA256' 'fb8b3d1a97aaade45365e7749b792e47abc04b1c29e22552fceea5c5c15a7753'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20410101-20501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20410101-20501231.nc' 'SHA256' '7da90e25a42a42ed4804e66f19cb38d879035984a1f537ac4d9e8ea12a7783be'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20510101-20601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20510101-20601231.nc' 'SHA256' 'cfa2e5d39bad4a982539ab5ef102b51b6f1d6bbf5d31ce33c3afcce3c605d65d'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20610101-20701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20610101-20701231.nc' 'SHA256' '59f46d0d4477611160fc5433b9bc6c7632a3802af9ab5238d5fc8f571abdf414'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20710101-20801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20710101-20801231.nc' 'SHA256' 'd50d511f55b7ead16939ca24dcaa17fea23ccfb48bd8483045d1f5cdfecef540'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20810101-20901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20810101-20901231.nc' 'SHA256' '76e2b5f9108a0202b9433aba5f3cd5e2551563b113e55d6b9ad5400286b2643b'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20910101-21001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_20910101-21001231.nc' 'SHA256' '3a4812a3d4f3b4f0110d425cfd8f7ba91f274dcab877ab2a8e6acfcec5b74759'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21010101-21101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21010101-21101231.nc' 'SHA256' '869cbfd5b8fc180ca2e6d523a03bdda8d588708a43bee5547ff4ca71e81575cb'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21110101-21201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21110101-21201231.nc' 'SHA256' '2a98e782cc27bd21179c2443e6e23f5d143aac6161453d4634e9ff342d20eefe'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21210101-21301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21210101-21301231.nc' 'SHA256' 'f477f2caa37fba80ff500e8c46b085ce3f73cdc269b959cf2165839da9fcaf83'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21310101-21401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21310101-21401231.nc' 'SHA256' '8209666b5a255f7a3cf48f43d9f29d64d90941787449ab7da6d5a72bb1c31b0f'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21410101-21501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21410101-21501231.nc' 'SHA256' '0659b00c73cd4bd37d7ce192518c84962a8f1726e6c1a33e7874be72ab5e8cee'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21510101-21601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21510101-21601231.nc' 'SHA256' 'd3208e40929d2d0b4b553cf578e60b9af758db17be356bd7f10b412a721d24d2'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21610101-21701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21610101-21701231.nc' 'SHA256' 'aa15de04d8feade7ca6ba0a9aba1eef126fa7afed4f18f72eb67e34b4cdcf877'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21710101-21801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21710101-21801231.nc' 'SHA256' 'c7150880565f8defdb415f0e23db503e5f54afbae023a19d8c9b34d7a5b4cbb9'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21810101-21901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21810101-21901231.nc' 'SHA256' '54bd2334122ceb19cfbe05340f6b408b77d2462349b13c4d2dbf9fda63face4e'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21910101-22001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_21910101-22001231.nc' 'SHA256' 'c700475b1f8c6aba3c8b8533554f85c5cd32a801c7f2cefdc94a855419a77aad'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22010101-22101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22010101-22101231.nc' 'SHA256' '3cd65f2278637a367dcfe39c4b20af5147d0bce3bc2dba0a736b3fac933b292e'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22110101-22201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22110101-22201231.nc' 'SHA256' '2d5f691f7c6f3c7cbee93c0cceae54b7ac8d73d7a619f86a2e371d890e98f97b'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22210101-22301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22210101-22301231.nc' 'SHA256' '60ae38625cf17ea2d951137e08976c91f89de205e0f0920566a83e2c778dfa26'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22310101-22401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22310101-22401231.nc' 'SHA256' '5de948369c41776b74b0386cfa33e15458bbbec59e07cae4e977965ed59f9df3'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22410101-22501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22410101-22501231.nc' 'SHA256' '2e836d14ce3b5ceebf6184ec52e80bbdc0c1885d2722615580d4eea362fd6061'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22510101-22601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22510101-22601231.nc' 'SHA256' '0258b42cffbebc2442c3a34259196051fd56f9ba3875cc0b29ba13b15a98c5ef'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22610101-22701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22610101-22701231.nc' 'SHA256' 'ae5da7342d77c3ee8e96f5b246c3a6fdad37149f7e76bebd388592ea31e9a79e'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22710101-22801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22710101-22801231.nc' 'SHA256' '0c3d771d3e5b143c804c9aa53a5ab0880f32ec80012dd0e65469289dd258ddcd'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22810101-22901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22810101-22901231.nc' 'SHA256' '82fe436a1e17ea941c8e8752b8b6e93afede059525cf8a594e51ff6bcf40268f'
'tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22910101-23001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp126/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp126_r1i1p1f1_gn_22910101-23001231.nc' 'SHA256' '8bf0f51f2b334f98efbf3814d426babbabeaafb23936ae142ec7cff8d8bdc0f6'
'tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20150101-20201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp245/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20150101-20201231.nc' 'SHA256' '64b470d982b2746fe7f7e3d134cf8888704e4bd39dd2683fcecb704e5068de36'
'tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20210101-20301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp245/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20210101-20301231.nc' 'SHA256' '3dff224d5cfb6248993c638166b7bb8e03bfc51e0fa8e78e7b79864923585907'
'tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20310101-20401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp245/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20310101-20401231.nc' 'SHA256' 'd61da6da4ecc0b28026005df5e778bb13988646a0cd00926785721d232033436'
'tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20410101-20501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp245/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20410101-20501231.nc' 'SHA256' '1d6d0eee0ba3fd0211bb10d7730c3fc32d99e55ca5348cf60b463d8b5ec747fe'
'tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20510101-20601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp245/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20510101-20601231.nc' 'SHA256' 'a7b41465ada75a1191e337b8f5b1a21be1c40076cc1763ac1cf57db05056bdf9'
'tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20610101-20701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp245/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20610101-20701231.nc' 'SHA256' '3658dfced2ff32a319938569086bb784ea9233a8aa358590fc3aad4bfc7e14df'
'tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20710101-20801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp245/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20710101-20801231.nc' 'SHA256' 'c43b583f5872c38a4c10b9f8f551dd0ad8a1ca7e6785a8d3b504480351a384ac'
'tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20810101-20901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp245/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20810101-20901231.nc' 'SHA256' '25915f519f4f3dd139ffd4926ffc4d9a95c5bf0d2c84e1ac40d721dc5f39b145'
'tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20910101-21001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp245/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp245_r1i1p1f1_gn_20910101-21001231.nc' 'SHA256' '194e18bbfec7ad66b82643df38cf2bbd3ee87f8d50cb752a55227ef886aee18a'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20150101-20201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20150101-20201231.nc' 'SHA256' 'cf420d8c834fe191aeac9c6cc00a2271f4d90534460a0824986d0c84a98c094f'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20210101-20301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20210101-20301231.nc' 'SHA256' 'a989b826354601775790a36b1f039bec724bfa6841a6db3fcce4b393f59527ae'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20310101-20401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20310101-20401231.nc' 'SHA256' 'dd531f1762bca39672dda4448025418371defb6eb8437d04028afaf5b3639b97'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20410101-20501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20410101-20501231.nc' 'SHA256' 'c3fe9d2510a4c73406b5f12a3181496901994f9afe2c50475b1973feb44f9f3c'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20510101-20601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20510101-20601231.nc' 'SHA256' '084ab519e66779588f84a70061771ec907758b5285699cfe68b67892f2e2d01f'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20610101-20701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20610101-20701231.nc' 'SHA256' '9401778c894966dbc210f535c32da8f1eb9964219fb456696d79c72cfe134ed3'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20710101-20801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20710101-20801231.nc' 'SHA256' '47eed2f085b95951a4a5d12206031e470c1cebae91fafa94f5898d95c783f3a1'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20810101-20901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20810101-20901231.nc' 'SHA256' '3b58ebebf07493ad4f6e96266c350eda8c51dd1ea6a5d12a481a7fdc9c5b25ca'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20910101-21001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_20910101-21001231.nc' 'SHA256' 'af2b94416b61f424c9bf9e5746971b096b2fde27b3c9529e80ec98b5ee3e55dd'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21010101-21101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21010101-21101231.nc' 'SHA256' 'fd1b2e1daf4f8ee7063bcd4d3eb70bbe624924a25ee5be9f10346931cc6ea066'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21110101-21201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21110101-21201231.nc' 'SHA256' 'a9cb57fdcb40bf767baae59b8003905451c9ab139701c2f6c873031ff2b1eadd'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21210101-21301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21210101-21301231.nc' 'SHA256' '843f5b6bbb8349b9b125330b1fbf9f7bf5e6fa40e14ab69fab4af5c93f2ca7a9'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21310101-21401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21310101-21401231.nc' 'SHA256' '4f1ee20f3c4898ff950d69ab5da44b23a81a80b2b51abb49f2ee6d526b56adfb'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21410101-21501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21410101-21501231.nc' 'SHA256' '91e3fcd94385d9c1d5a3967c1245a91230b6c1413f992ef4036886503a192214'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21510101-21601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21510101-21601231.nc' 'SHA256' '4c3f7346b4329e30459f785a92ec9c1e61a1522fb67d4b164be02bbb58b2a875'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21610101-21701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21610101-21701231.nc' 'SHA256' 'f5bba76de622db9e58783827f94293092d25d82b6b442686b90945e9fe36a0ff'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21710101-21801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21710101-21801231.nc' 'SHA256' 'd04d2ae671b811a7dbd7d92adba5a4cd83a91208efcdfdb9f7b21f83f7d73a55'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21810101-21901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21810101-21901231.nc' 'SHA256' 'fbb35c388aa4524da98525406034083b61ac06d36c114bdcdfd644f8182d9c31'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21910101-22001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_21910101-22001231.nc' 'SHA256' 'b9b8eafca56ea899d20f1e2f1b1d020525c06b55f4fb3793c8605abd73704efd'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22010101-22101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22010101-22101231.nc' 'SHA256' '9c009ff612a56fc6241a2cc08dee5cd4d0c575ed466e1e1dda39551a3fc8d82d'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22110101-22201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22110101-22201231.nc' 'SHA256' '3932c62f25d5d51c547bffda7f3d23fcee41366436b0209f5e084b147e4ff243'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22210101-22301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22210101-22301231.nc' 'SHA256' '382f7af2290b2b4d88c196ddfe8bd9e765975f65455b4e57392348468623147b'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22310101-22401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22310101-22401231.nc' 'SHA256' 'ed8a0c104e7b8c2f89bde45c601c8b84e005b756a1e3679c5935f007321f2499'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22410101-22501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22410101-22501231.nc' 'SHA256' 'fa310e2fc8e186a34c1ab1992d36c19bdd7f68ad247680e08c7f9408d591726c'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22510101-22601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22510101-22601231.nc' 'SHA256' '8c81510ceb22a26be9e55754b9d0e34036b0481023d25f508c45da84d51f383b'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22610101-22701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22610101-22701231.nc' 'SHA256' '786a716d46f34c40cd203f46fe4d3d61301e002a16a06a85cdcb911a7167cb1f'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22710101-22801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22710101-22801231.nc' 'SHA256' '9daf6020521ac2b55dcd5a5d8c27c4dae4c79044102cbfbe3e578272cebb2c92'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22810101-22901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22810101-22901231.nc' 'SHA256' '043b6725bb34e711980edcdf78d6f6b33743fcfb6d004e8c22bf465386038065'
'tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22910101-23001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Oday/tos/gn/v20190429/tos_Oday_CanESM5_ssp585_r1i1p1f1_gn_22910101-23001231.nc' 'SHA256' '1104366755ca35a0782303fb97e2186fd2be64cf56295c16c00729f24cf29938'
'tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp126/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20150101-20241231.nc' 'SHA256' 'eb60a5fc4bbee79bf67714dd4743030e9d4eb3a8ca92b8acc30b6668e25e5d5c'
'tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp126/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20250101-20341231.nc' 'SHA256' '5ed0c8ecf6bde28ba78b5a78362fdda967457249094e250811d4bf004e4574f2'
'tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp126/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20350101-20441231.nc' 'SHA256' '3cc8bd98bd1481ad3eadcc37dee182873ec6f49aa1535a9d2d2fa5f7c4954189'
'tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp126/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20450101-20541231.nc' 'SHA256' 'dc43c4ab2b3c7349cee58d29c6ee16a78c0c68194691fc9e21eaba9c135b688e'
'tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp126/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20550101-20641231.nc' 'SHA256' '913b2fff8e1eb6ec3c93bf5a91c5498f2c3dadf06e533aee85fcbd964d1a6a85'
'tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp126/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20650101-20741231.nc' 'SHA256' 'a29a5476274e97488b676c936875128dfa966a43fbbbbe04e1459cb7afbad9ea'
'tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp126/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20750101-20841231.nc' 'SHA256' '666919910c699adfb0719322799fc20a76a3cd418194adc86672b81c3c22bd35'
'tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp126/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20850101-20941231.nc' 'SHA256' 'ac07b300d86bf3d1f08bbb07b6065d768ad6c99ac30dce6cf23e5b357b7975b0'
'tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp126/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp126_r1i1p1f1_gn_20950101-21001231.nc' 'SHA256' '57eee46d9a0df6496a99da2d51b97cf16d765e5d9fe62784bba1ca037c737f75'
'tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20150101-20241231.nc' 'SHA256' 'fca6e9e4719aafdc6c55fe5bd36f8849411f2a39fcce5596a0e49339a109b487'
'tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20250101-20341231.nc' 'SHA256' 'b7eaa5fc136048d89d0dff873314d2b20df1452ca621a4d7cc9abdb355f89cde'
'tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20350101-20441231.nc' 'SHA256' 'ecbaa91460accdb22683f17422834b3ff6067c9c15178deb46a9c9fa625d2476'
'tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20450101-20541231.nc' 'SHA256' '68c1f8ae56e45948cad188b9859144d7d26d2778d67e0c69b9b2fe98872a71b4'
'tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20550101-20641231.nc' 'SHA256' '5d72f6ea7d3c4265456a3354472c07e46b7ca4cd008da727b2b70cce5b57ca16'
'tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20650101-20741231.nc' 'SHA256' '852aa4b3302c70ecdbcd561b7f4ed9814a80a496710daad26b1f77587d0831fb'
'tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20750101-20841231.nc' 'SHA256' '2e683a368189b82fae54beee6f70e461d81fe40f9f100c8ddbe54f92e6ce1397'
'tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20850101-20941231.nc' 'SHA256' '035d6eb9e6eafba89630bc3be769b17d437175c5b39e0911a1b797b08e1d605d'
'tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp245/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp245_r1i1p1f1_gn_20950101-21001231.nc' 'SHA256' '25bf5ad5eac024b7bf970928425d80c30eba44db1cf829e348044f3ff35faf06'
'tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20150101-20241231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp585/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20150101-20241231.nc' 'SHA256' '8c6bc695da484f02a7df64c1d61f9fe068a9807a425a954b80623b9f11207025'
'tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20250101-20341231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp585/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20250101-20341231.nc' 'SHA256' 'df8122d1c96544beb96ac8502943341224051810b99dab2a627e3f2b1610d933'
'tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20350101-20441231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp585/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20350101-20441231.nc' 'SHA256' '880c7376d70fe6cdc279e916f4d86ddbed6b41696c226ba42cfd47234d7a8b40'
'tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20450101-20541231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp585/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20450101-20541231.nc' 'SHA256' '4b8fad3ed568ef5de07a9849a2e0f49860d5a755ec9d9f30fd3007f6eef53aa6'
'tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20550101-20641231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp585/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'ed73687054935e53f4ca8a3b8a14f46562d49a8601822a67cd4dcd00a1af3ba9'
'tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20650101-20741231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp585/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20650101-20741231.nc' 'SHA256' '7fa8731919090a46098d473abe35c2d9d9129033e80f1734d25bb688d68d3e80'
'tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20750101-20841231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp585/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20750101-20841231.nc' 'SHA256' '7c4dc02a3527b02a99f0b934cd2179f16cde738ea95fec19586bd6c226724583'
'tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20850101-20941231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp585/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20850101-20941231.nc' 'SHA256' '1c0bd17480a4b2709b7ee62f953a242b65b946490ed1e00f23a0ac8282eeb0ba'
'tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20950101-21001231.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp585/r1i1p1f1/Oday/tos/gn/v20191114/tos_Oday_MIROC6_ssp585_r1i1p1f1_gn_20950101-21001231.nc' 'SHA256' '57efbf3a05d542c5ebeb5b6662a74bad9ef2a9831113d07eb7d766b9db196e4a'
'tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_20150101-20641231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp126/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_20150101-20641231.nc' 'SHA256' 'dd43562a0b16e236cbf15a2048ddf64a399958e4c51d64fbca3308a51585ac48'
'tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_20650101-21001231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp126/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_20650101-21001231.nc' 'SHA256' '0894d7d5d70bdff5ee82fd8710ca92302aa2ba620570732cb6afbf567239664f'
'tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_21010101-21501231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp126/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_21010101-21501231.nc' 'SHA256' 'ec21228d8d025556825e43d924129646b1be9fc1658a757b9462ce51c97c78b4'
'tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_21510101-22001231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp126/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_21510101-22001231.nc' 'SHA256' '93d54aa23ddf3a64117aefbf339c34317df29c9a2339bc0c1822450af38e0671'
'tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_22010101-22501231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp126/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_22010101-22501231.nc' 'SHA256' 'e250d588bab34f6c34ca967b053b7f5065f7f7fb338e566bf8a36cf489780861'
'tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_22510101-23001231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp126/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp126_r1i1p1f1_gn_22510101-23001231.nc' 'SHA256' '166393af7973941f048befd19f987c0f4ccd7ea62292a15bb8d0b29cccb5904d'
'tos_Oday_MRI-ESM2-0_ssp245_r1i1p1f1_gn_20150101-20641231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp245/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp245_r1i1p1f1_gn_20150101-20641231.nc' 'SHA256' '76bc275ea9915b95abe2f50034a0f92c13d97eb4d32fdd104a166e5368405b52'
'tos_Oday_MRI-ESM2-0_ssp245_r1i1p1f1_gn_20650101-21001231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp245/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp245_r1i1p1f1_gn_20650101-21001231.nc' 'SHA256' '7c31549dac3744446031bc2c5af49d3d0d803fc5a659fe8c020412cb052b18dd'
'tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_20150101-20641231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp585/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_20150101-20641231.nc' 'SHA256' '4ca1b48f15e41de57366a567d20dcd7c3c81110134db1dc36cfa461e0477f914'
'tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_20650101-21001231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp585/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_20650101-21001231.nc' 'SHA256' 'bfd34f77c8c9c62c243251be56613700accb236e722f040be8cb9c207aafa507'
'tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_21010101-21501231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp585/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_21010101-21501231.nc' 'SHA256' 'd9aee338d9b82730f50b6efa080c15a06a388b9ed7a87d571b00ccf502f6c19f'
'tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_21510101-22001231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp585/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_21510101-22001231.nc' 'SHA256' '634ab4f87761cc011e5f7acd4879da5a0e816af963efa6a6b4e95616ce294eee'
'tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_22010101-22501231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp585/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_22010101-22501231.nc' 'SHA256' '80fb162ea45d677ce7e4c39751846afac90a790a4acd9e092b968f15b43de163'
'tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_22510101-23001231.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp585/r1i1p1f1/Oday/tos/gn/v20210329/tos_Oday_MRI-ESM2-0_ssp585_r1i1p1f1_gn_22510101-23001231.nc' 'SHA256' '2e79227e41146ba5af9ff8fb8acc14ad2a0f3d28d13fd14a0b6f7350f1e4106e'
'tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20150101-20241231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp126/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20150101-20241231.nc' 'SHA256' '4481238e8a656a5a7bee3988c5a14ee08717d99d8cffd92e0dd78cd1823b348c'
'tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20250101-20341231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp126/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20250101-20341231.nc' 'SHA256' '3420ac9cc0c4d6691253246ed93ae5a64781e1ecd4c9cb18627ce4faacfc3c49'
'tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20350101-20441231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp126/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20350101-20441231.nc' 'SHA256' '8521f07a480c255e42f120c48e9159af68eb1f7a5f113aa470f65d61f70c4f2b'
'tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20450101-20541231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp126/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20450101-20541231.nc' 'SHA256' '7cc10c8df4bba63fdb387aada70138930e7c2dcc193ce34e1f82d37b4e750cfa'
'tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20550101-20641231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp126/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20550101-20641231.nc' 'SHA256' '889db1ea6e160d788e808cceae78d18c306501eafdb223e04da57ed79244b7a6'
'tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20650101-20741231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp126/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20650101-20741231.nc' 'SHA256' '7b835860ab34e5eb1a522f82f491e1c99573bed4edacf5ba3e3e80783b9dc81f'
'tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20750101-20841231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp126/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20750101-20841231.nc' 'SHA256' '1098edb97e24575b56c68f4df46cab76840d6e166d581b46475fc73a1b13bc43'
'tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20850101-20941231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp126/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20850101-20941231.nc' 'SHA256' '4042421ccbfd0c132998ad6eaa1af6706c8aa7f8c387976541fff1d1bb4ff563'
'tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20950101-21001231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp126/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp126_r1i1p1f1_gr_20950101-21001231.nc' 'SHA256' 'df0ef94c07c1a8f9ccdc7f7191449d6adadde3c9e9295be2441e96f6e4ee2fe0'
'tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20150101-20241231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp245/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20150101-20241231.nc' 'SHA256' '4de32aaa196bb1e13fdf0b890d13f9885c342d0e6634f786912065aab990e76a'
'tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20250101-20341231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp245/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20250101-20341231.nc' 'SHA256' '90c43d020db2b58bd8cc04139ada503b9485e624c22d66e3ac4014e7e95c335e'
'tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20350101-20441231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp245/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20350101-20441231.nc' 'SHA256' '6553896dbe426d60c86a26535f37e5ebd7c852764db29c6234bfb5133b08eba9'
'tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20450101-20541231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp245/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20450101-20541231.nc' 'SHA256' '5f7800e55ce53488f3e1283eba80f5375edc723866829a0dfd943f80a5dec30d'
'tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20550101-20641231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp245/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20550101-20641231.nc' 'SHA256' '848d8a9aad510e75ca3bbf9df820be13ac8b1cf9e5b05f6eafe7760cdcf47fe1'
'tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20650101-20741231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp245/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20650101-20741231.nc' 'SHA256' '651fcca226fca9f19a835675997d1f75282e86766fa4385686d0c3e5e96d4c5c'
'tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20750101-20841231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp245/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20750101-20841231.nc' 'SHA256' 'bbbfc44219749f462d8279ac6cbe7adeeae93ecc8ea5e32bdc8667e7d17aae4a'
'tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20850101-20941231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp245/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20850101-20941231.nc' 'SHA256' '56130f364aacc62ebe0136c2cea78b996b91506d0cf7928e1a7382e3778fe0e6'
'tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20950101-21001231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp245/r1i1p1f1/Oday/tos/gr/v20180701/tos_Oday_GFDL-ESM4_ssp245_r1i1p1f1_gr_20950101-21001231.nc' 'SHA256' '3e10cea0e4b1bd48351d7fc4fc6aee74edc8443c2f2c03a26e988867acd071b3'
'tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20150101-20241231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Oday/tos/gn/v20180701/tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20150101-20241231.nc' 'SHA256' '0ac9ab8ddb91e6500a2a10558abd03f5775be7889976be4b09b0f0cee919ca9d'
'tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20250101-20341231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Oday/tos/gn/v20180701/tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20250101-20341231.nc' 'SHA256' '4c493d13594a79959b475ef4e09be0a60c3216e415dc2a6b97707262982596b7'
'tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20350101-20441231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Oday/tos/gn/v20180701/tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20350101-20441231.nc' 'SHA256' 'bebfbd1c60171bc820f0578a12b2fdcb5c6a6b8fd6a8aaa16ed6a0c674eca4b7'
'tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20450101-20541231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Oday/tos/gn/v20180701/tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20450101-20541231.nc' 'SHA256' 'a262b04042402fcc95731d07e6501406a961a49f8fb0d959cb88c408b9cb1fa9'
'tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20550101-20641231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Oday/tos/gn/v20180701/tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20550101-20641231.nc' 'SHA256' 'ef5f9607e1819857ccb62c2701fb8fda8665c4b0442f862613869b69b9556f76'
'tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20650101-20741231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Oday/tos/gn/v20180701/tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20650101-20741231.nc' 'SHA256' 'f9a5404d50217a10881431f4025783ca9a3203d52867d66d6d1569a051b46841'
'tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20750101-20841231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Oday/tos/gn/v20180701/tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20750101-20841231.nc' 'SHA256' '1194d1be54d6dbfef614062b3c7f5873064c21be15b9b1e328ebdce7b9d593c9'
'tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20850101-20941231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Oday/tos/gn/v20180701/tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20850101-20941231.nc' 'SHA256' '813af4c6914bc4f67538c088ffd95995415a492e47370cf99c7eee3bac8fc6f3'
'tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20950101-21001231.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp585/r1i1p1f1/Oday/tos/gn/v20180701/tos_Oday_GFDL-ESM4_ssp585_r1i1p1f1_gn_20950101-21001231.nc' 'SHA256' '6dd53bc9a12ecfc5f08ae4b57a004f4cd40bc089b5d6a4c13bade067c947a01c'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 162 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
